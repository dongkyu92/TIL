package day9;
/*
 * [상속]
 * - 자바의 모든 객체들은 상속이라는 객체지향언어의 특징을 지원한다.
 * - 자바에서 생성되는 모든 객체들은 기본적으로 java.lang.Object 이라는 객체를 상속하게 된다.
 * - 다형성을 유용하게 쓸 수 있게 하기 위함.
 * - 클래스 헤더에 extends 라는 절을 사용하는 부모 클래스를 설정하는데 하나의 부모 클래스만 설정 가능하다( 단일상속)
 * - C++ 은 다중상속 가능. Java는 단일 상속.
 * - 조상부터 물려받은 메서드들은 필요에 따라 대체할 수 있다. - 메서드 오버라이딩이라 한다.
 * - 어떤 클래스든 객체를 생성하면 해당 클래스만 메모리 할당하는 것이 아니라 조상 클래스들도 메모리 할당한다.
 * - 자손클래스의 객체 생성시 생성자 메서드가 호출되면 바로 조상 클래스의 생성자도 호출 된다.
 * - 내부적으로는 아규먼트 없는 생성자가 호출되는데 다른 생성자를 호출하려는 경우 Super()라는 메서드를 사용한다.
 * - 객체를 참조하는 용도 : this, super
 * - 객체를 초기화하는 용도로 사용되는 생성자 메서드 호출 :  this(), super() 수퍼는 필요한 경우 꼭 구현해야됨.
 * 
 * - this(), super() : 생성자 안에서만 호출 가능(첫번째 행에서만, (this 호출하는 애는 super호출  x, super 호출하는에는 this 호출x)
 * 
 * - this, super : 객체 생성 시점에 초기화 된다. static 메서드에서는 사용 불가하다.
 * - non-static 메서드와 생성자 메서드에서만 사용 가능하다. 메인 메서드 안에서는 this와 super를 못쓴다는 얘기.
 * 
 * 
 * [제어자 : modifier(수정자, 한정자)]
 * - 접근 제어자 : public, protected, (default 접근 제어자를 생성한 경우), private
 * - 활용 제어자 : final, static, abstract, transient, synchronized .....
 * 
 * 제어자란 클래스, 메서드, 변수 앞에 설정되어 접근 가능 여부와 사용 방식을 제어하는 구문
 * [제어자] class 클래스명 extends 부모클래스명{
 * 
 * 	[모든접근제어자, final, static] 멤버변수 선언
 * 	[모든접근제어자, 활용제어자x, ] 생성자 메서드 정의
 * 	[모든 접근제어자, final, static, abstract] 메서드 정의  
 *     [] 생략가능이라는 뜻
 * 
 *  - 클래스에는 접근제어자를 두 가지만 설정 가능 : public, (default)
 *  	public이 설정된 클래스는 : 누구나
 *  	(default)클래스 : 동일 패키지 내의 클래스.
 *  - 실무에서는 클래스이름과 소스이름 동일하게 함. 유지보수 용이하게. (public class는 (메인) 똑같은 java파일에 있어야됨.)
 *  - final : 변경할 수 없는, 마지막의
 *  - abstract : 반드시 변경해야 하는, 마지막이 아닌, 미완성의 
 *  
 *  	final 클래스 :  상속 불가(마지막 클래스) math, System 등.. 객체 생성 가능.
 *  	abstract 클래스 : 객체 생성 불가, 상속만 가능. 자식 클래스에서 보완하여 완성해야 됨.
 *  
 *  	public - 누구나
 *  	protected - 동일패키지 이거나 자손이면 접근 가능.
 *  	(default) - 반드시 동일 패키지 이어야만 접근 가능. 자손도 접근 x 
 *  	private - 외부에서는 자손이든 객체를 생성한 클래스든 접근 불가
 *  				  멤버가 정의된 클래스 내에서만 사용 가능
 *  
 *  
 *  	+ : public
 *  	# : protected
 *  	(), ~ : (default)
 *  	- : private
 *  
 *  	- static, final을 함께 지정하여 상수를 만든다.
 *  	- public class math {
 *  				public final static double PI = 3.14159;
 *  				누구든 접근가능, 변경불가, static 자동으로 생성되기 때문에 객체생성하지 않아도 클래스 이름으로 접근가능!!!!!
 *  				static 자동으로 생성되기 때문에 객체생성하지 않아도 클래스 이름으로 접근가능!!!!!
 *  				static 자동으로 생성되기 때문에 객체생성하지 않아도 클래스 이름으로 접근가능!!!!!
 *  				static 자동으로 생성되기 때문에 객체생성하지 않아도 클래스 이름으로 접근가능!!!!!
 *  	}
 *  
 *  	Math.PI
 *  
 *  	Integer.MAX_VALUE
 *  
 *     - 메서드에
 *        final : 자손에 의해 오버라이딩이 불가능한 메서드를 정의.
 *        abstract : 자손에 의해 반드시 오버라이딩 해야 하는 메서드를 정의.
 *        					메서드의 헤더만 정의되고 바디가 없는 메서드.
 *
 *  	
 * }
 */
public class inheritance {

}
